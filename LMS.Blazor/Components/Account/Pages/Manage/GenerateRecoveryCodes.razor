@page "/Account/Manage/GenerateRecoveryCodes"
@layout ManageLayout

@using Microsoft.AspNetCore.Identity
@using LMS.Blazor.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<GenerateRecoveryCodes> Logger

<PageTitle>Generera återställningskoder för tvåfaktorsautentisering (2FA)</PageTitle>

@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
}
else
{
    <div class="dash-card__head">Generera återställningskoder för 2FA</div>

    <div class="row g-3">
        <div class="col-12">
            <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <strong>Förvara dessa koder på en säker plats.</strong>
                <p class="mb-2 mt-2">
                    Om du förlorar din enhet och inte har återställningskoderna kommer du att förlora åtkomst till ditt konto.
                </p>
                <p class="mb-0">
                    Att generera nya återställningskoder ändrar inte nycklarna som används i autentiseringsappar.
                    Om du vill ändra nyckeln som används i en autentiseringsapp bör du
                    <a href="Account/Manage/ResetAuthenticator" class="alert-link">återställa dina autentiseringsnycklar.</a>
                </p>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <form @formname="generate-recovery-codes" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken />
            <button class="btn btn-hero" type="submit">
                <i class="bi bi-arrow-clockwise me-2"></i>Generera återställningskoder
            </button>
        </form>
    </div>
}

@code {
    private string? message;
    private ApplicationUser user = default!;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var isTwoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        if (!isTwoFactorEnabled)
        {
            throw new InvalidOperationException("Cannot generate recovery codes for user because they do not have 2FA enabled.");
        }
    }

    private async Task OnSubmitAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        message = "Du har genererat nya återställningskoder.";

        Logger.LogInformation("User with ID '{UserId}' has generated new 2FA recovery codes.", userId);
    }
}
