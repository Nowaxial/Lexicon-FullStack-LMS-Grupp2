@page "/Account/Manage/EnableAuthenticator"
@layout ManageLayout

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

<PageTitle>Konfigurera autentiseringsapp</PageTitle>

@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
}
else
{
    <div class="dash-card__head">Konfigurera autentiseringsapp</div>

    <StatusMessage Message="@message" />

    <div class="row g-3">
        <div class="col-12">
            <p class="text-muted mb-3">För att använda en autentiseringsapp, följ dessa steg:</p>

            <div class="setup-steps">
                <div class="step-item mb-4">
                    <div class="step-number">
                        <i class="bi bi-download"></i>
                    </div>
                    <div class="step-content">
                        <h6 class="mb-2">Ladda ner en autentiseringsapp</h6>
                        <p class="text-muted small mb-2">
                            Ladda ner Microsoft Authenticator för
                            <a href="https://go.microsoft.com/fwlink/?Linkid=825072" class="text-decoration-none">Android</a> och
                            <a href="https://go.microsoft.com/fwlink/?Linkid=825073" class="text-decoration-none">iOS</a> eller
                            Google Authenticator för
                            <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en" class="text-decoration-none">Android</a> och
                            <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8" class="text-decoration-none">iOS</a>.
                        </p>
                    </div>
                </div>

                <div class="step-item mb-4">
                    <div class="step-number">
                        <i class="bi bi-qr-code"></i>
                    </div>
                    <div class="step-content">
                        <h6 class="mb-2">Skanna QR-kod eller ange nyckel</h6>
                        <p class="text-muted small mb-3">
                            Skanna QR-koden eller ange denna nyckel <kbd class="bg-light text-dark">@sharedKey</kbd> i din autentiseringsapp.
                            Mellanslag och versaler spelar ingen roll.
                        </p>
                        <div class="alert alert-info small">
                            <i class="bi bi-info-circle me-2"></i>
                            Lär dig hur du <a href="https://go.microsoft.com/fwlink/?Linkid=852423" class="alert-link">aktiverar QR-kodgenerering</a>.
                        </div>
                        <div data-url="@authenticatorUri"></div>
                    </div>
                </div>

                <div class="step-item">
                    <div class="step-number">
                        <i class="bi bi-shield-check"></i>
                    </div>
                    <div class="step-content">
                        <h6 class="mb-2">Verifiera konfigurationen</h6>
                        <p class="text-muted small mb-3">
                            När du har skannat QR-koden eller angett nyckeln kommer din autentiseringsapp att ge dig en unik kod.
                            Ange koden i bekräftelserutan nedan.
                        </p>

                        <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                            <DataAnnotationsValidator />
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label for="code" class="form-label text-muted small">Verifieringskod</label>
                                    <InputText @bind-Value="Input.Code" class="form-control" autocomplete="off"
                                               placeholder="Ange verifieringskoden" />
                                    <ValidationMessage For="() => Input.Code" class="text-danger small" />
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-hero">
                                    <i class="bi bi-check-circle me-2"></i>Verifiera
                                </button>
                            </div>
                            <ValidationSummary class="text-danger mt-2" role="alert" />
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .setup-steps .step-item {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
    }

    .step-number {
        width: 40px;
        height: 40px;
        background: var(--bg-main);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        font-size: 1.1rem;
    }


    .step-content {
        flex: 1;
    }

        .step-content a {
            color: var(--bg-main) !important;
        }

            .step-content a:hover {
                color: var(--primary) !important;
            }
</style>

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private ApplicationUser user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid)
        {
            message = "Fel: Verifieringskoden är ogiltig.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

        message = "Din autentiseringsapp har verifierats.";

        if (await UserManager.CountRecoveryCodesAsync(user) == 0)
        {
            recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        }
        else
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verification Code")]
        public string Code { get; set; } = "";
    }
}
