@using LMS.Shared.DTOs
@using Service.Contracts
@inject INotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable
@rendermode InteractiveServer

@if (isTeacher && notifications != null)
{
    <button class="nav-link-btn position-relative d-flex align-items-center" @onclick="OpenNotificationModal">
        <i class="bi bi-bell d-none d-md-inline"></i>
        <span class="d-md-none nav-link-text">Notifikation</span>

        @if (unreadCount > 0)
        {
            <span class="badge rounded-pill bg-danger ms-2 d-md-none mobile-badge">@unreadCount</span>
            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none d-md-inline">@unreadCount</span>
        }
    </button>
}

<!-- Notification List Modal -->
@if (showNotificationModal)
{
    <div class="modal fade show rounded" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header lms-notification-modal-header rounded">
                    <h5 class="modal-title">Notifikationer</h5>
                    <button type="button" class="btn-close" @onclick="CloseNotificationModal"></button>
                </div>
                <div class="modal-body p-0 notification-list-body">

                    @if (notifications.Any())
                    {
                        @foreach (var notification in notifications)
                        {
                            <div class="notification-item @(notification.IsRead ? "" : "unread") p-3 border-bottom rounded"
     style="cursor: pointer;" @onclick="() => ShowNotification(notification)">

                                <div class="mb-1">
                                    @if (notification.Message.Contains("kontaktmeddelande från"))
                                    {
                                        @notification.Message.Replace("Nytt kontaktmeddelande från", "Nytt meddelande från")
                                    }
                                    else
                                    {
                                        @notification.Message
                                    }
                                </div>
                                <small class="text-muted">@notification.Timestamp.ToString("yyyy-MM-dd HH:mm")</small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="p-3 text-muted text-center">Inga notifikationer</div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Message Detail Modal -->
@if (selectedNotification != null)
{
    <div class="modal fade show lms-notification-modal" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header lms-notification-modal-header">
                    <h5 class="modal-title">Kontaktmeddelande</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body p-3 p-md-4">
                    @if (decryptedMessage != null)
                    {
                        <div class="lms-field-group">
                            <label class="lms-field-label">Namn</label>
                            <div class="lms-field-value">@decryptedMessage.Name</div>
                        </div>

                        <div class="lms-field-group">
                            <label class="lms-field-label">E-post</label>
                            <div class="lms-field-value">@decryptedMessage.Email</div>
                        </div>

                        <div class="lms-field-group">
                            <label class="lms-field-label">Ämne</label>
                            <div class="lms-field-value">@decryptedMessage.Subject</div>
                        </div>

                        <div class="lms-field-group">
                            <label class="lms-field-label">Meddelande</label>
                            <div class="lms-message-content">
                                @decryptedMessage.Message
                            </div>
                        </div>
                    }
                    else if (errorMessage != null)
                    {
                        <div class="alert alert-danger">
                            <strong>Fel:</strong> @errorMessage
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary mb-3" role="status">
                                <span class="visually-hidden">Laddar...</span>
                            </div>
                            <p class="mb-0">Dekrypterar meddelande...</p>
                        </div>
                    }
                </div>
                <div class="modal-footer d-flex flex-column flex-sm-row gap-2">
                    @if (selectedNotification.IsRead)
                    {
                        <button type="button" class="btn btn-warning w-100 w-sm-auto" @onclick="() => MarkAsUnread(selectedNotification.Id)">
                            Markera som oläst
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-success w-100 w-sm-auto" @onclick="() => MarkAsRead(selectedNotification.Id)">
                            Markera som läst
                        </button>
                    }
                    <button type="button" class="btn btn-secondary w-100 w-sm-auto" @onclick="CloseModal">Stäng</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<NotificationItem>? notifications;
    private NotificationItem? selectedNotification;
    private ContactMessageDto? decryptedMessage;
    private string? errorMessage;
    private bool showNotificationModal = false;
    private int unreadCount => notifications?.Count(n => !n.IsRead) ?? 0;
    private Timer? _timer;
    private bool isTeacher = false;
    private string? userId;

    private void OpenNotificationModal()
    {
        showNotificationModal = true;
    }

    private void CloseNotificationModal()
    {
        showNotificationModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isTeacher = authState.User.IsInRole("Teacher");
        userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (isTeacher && !string.IsNullOrEmpty(userId))
        {
            await LoadNotifications();
            _timer = new Timer(async _ =>
            {
                try
                {
                    await InvokeAsync(LoadNotifications);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Timer error: {ex.Message}");
                }
            }, null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
        }
    }

    private async Task LoadNotifications()
    {
        try
        {
            if (string.IsNullOrEmpty(userId)) return;

            notifications = await NotificationService.GetNotificationsForUserAsync(userId);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadNotifications ERROR: {ex.Message}");
        }
    }

    private async Task ShowNotification(NotificationItem notification)
    {
        showNotificationModal = false;
        selectedNotification = notification;
        decryptedMessage = null;
        errorMessage = null;

        if (notification.Message.Contains("kontaktmeddelande från"))
        {
            try
            {
                Console.WriteLine($"Processing notification: {notification.Message}");

                var parts = notification.Message.Split(": ");
                Console.WriteLine($"Split parts: {string.Join(" | ", parts)}");

                if (parts.Length >= 2)
                {
                    var subject = parts[1];
                    Console.WriteLine($"Looking for subject: {subject}");

                    var contactMessages = await NotificationService.GetAllContactMessagesAsync();
                    Console.WriteLine($"Found {contactMessages.Count} contact messages");

                    var matchingMessage = contactMessages
                        .Where(m => m.Subject == subject)
                        .OrderByDescending(m => m.Timestamp)
                        .FirstOrDefault();

                    if (matchingMessage != null)
                    {
                        Console.WriteLine($"Found matching message with ID: {matchingMessage.Id}");
                        decryptedMessage = await NotificationService.DecryptMessageAsync(matchingMessage.Id);
                        Console.WriteLine($"Decryption result: {(decryptedMessage != null ? "Success" : "Failed")}");
                    }
                    else
                    {
                        errorMessage = $"Kunde inte hitta kontaktmeddelande med ämne: {subject}";
                        Console.WriteLine(errorMessage);
                    }
                }
                else
                {
                    errorMessage = "Kunde inte extrahera ämne från notifikationen";
                    Console.WriteLine(errorMessage);
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Fel vid dekryptering: {ex.Message}";
                Console.WriteLine($"Error loading contact message: {ex.Message}");
            }
        }
        else
        {
            errorMessage = "Detta är inte ett kontaktmeddelande";
        }

        StateHasChanged();
    }

    private void CloseModal()
    {
        selectedNotification = null;
        decryptedMessage = null;
        errorMessage = null;
        StateHasChanged();
    }

    private async Task MarkAsRead(string id)
    {
        try
        {
            if (string.IsNullOrEmpty(userId)) return;

            await NotificationService.MarkAsReadAsync(id, userId);
            await LoadNotifications();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"MarkAsRead error: {ex.Message}");
        }
    }

    private async Task MarkAsUnread(string id)
    {
        try
        {
            if (string.IsNullOrEmpty(userId)) return;

            await NotificationService.MarkAsUnreadAsync(id, userId);
            await LoadNotifications();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"MarkAsUnread error: {ex.Message}");
        }
    }

    public void Dispose() => _timer?.Dispose();
}
