@page "/documents"
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Document Manager</h3>

<InputFile OnChange="UploadFiles" multiple />
@if (!string.IsNullOrEmpty(uploadMessage))
{
    <p>@uploadMessage</p>
}

<h4>Available Documents</h4>
@if (documents == null)
{
    <p>Loading...</p>
}
else if (!documents.Any())
{
    <p>No documents uploaded yet.</p>
}
else
{
    <ul>
        @foreach (var doc in documents)
        {
            <li>
                @doc.FileName
                <button @onclick="() => DownloadFile(doc.Id, doc.FileName)">Download</button>
            </li>
        }
    </ul>
}

@code {
    private string? uploadMessage;
    private List<DocumentDto> documents = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();
    }

    private async Task LoadDocuments()
    {
        documents = await Http.GetFromJsonAsync<List<DocumentDto>>("api/documents") ?? new List<DocumentDto>();
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        uploadMessage = "";

        foreach (var file in e.GetMultipleFiles())
        {
            var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream(10 * 1024 * 1024)), "file", file.Name);

            var response = await Http.PostAsync("api/documents", content);
            if (response.IsSuccessStatusCode)
            {
                uploadMessage += $"Uploaded {file.Name} successfully!<br/>";
            }
            else
            {
                uploadMessage += $"Failed to upload {file.Name}: {response.ReasonPhrase}<br/>";
            }
        }

        await LoadDocuments();
    }

    private async Task DownloadFile(Guid id, string fileName)
    {
        var response = await Http.GetAsync($"api/documents/{id}");
        if (response.IsSuccessStatusCode)
        {
            var bytes = await response.Content.ReadAsByteArrayAsync();
            using var streamRef = new DotNetStreamReference(stream: new MemoryStream(bytes));
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
    }

    public class DocumentDto
    {
        public Guid Id { get; set; }
        public string FileName { get; set; } = string.Empty;
    }
}